import streamlit as st
import pandas as pd
import datetime
import os
import matplotlib.pyplot as plt
import random

# Injecter un peu de style responsive
st.markdown("""
    <style>
    html, body, [class*="css"]  {
        font-size: 18px !important;
    }
    </style>
""", unsafe_allow_html=True)

# Fonctions
def ajouter_seance():
    st.subheader("Ajouter une s√©ance")
    date_input = st.date_input("Date", value=datetime.date.today())
    type_seance = st.selectbox("Type de s√©ance", ["Sparring", "Drilling", "Cardio", "Repos"])
    duree = st.number_input("Dur√©e de la s√©ance (min)", min_value=0)
    if st.button("Ajouter la s√©ance"):
        new_data = pd.DataFrame([[date_input, type_seance, duree]], columns=["Date", "Type", "Dur√©e (min)"])
        new_data.to_csv("log.csv", mode='a', header=False, index=False)
        st.success("S√©ance ajout√©e avec succ√®s !")

def generer_seance_cardio():
    st.subheader("G√©n√©rateur de S√©ance de Cardio al√©atoire")
    type_cardio = st.selectbox("Type de cardio", ["Rameur", "V√©lo", "Course", "Assault Bike"])
    intensite = st.selectbox("Intensit√©", ["Faible", "Mod√©r√©", "√âlev√©"])
    duree = st.number_input("Dur√©e totale (min)", min_value=10, max_value=120, value=30)

    if st.button("G√©n√©rer la s√©ance"):
        plan = ""
        if intensite == "Faible":
            warmup = random.randint(max(1, int(duree * 0.10)), max(1, int(duree * 0.15)))
            cooldown = random.randint(max(1, int(duree * 0.10)), max(1, int(duree * 0.15)))
            steady = duree - warmup - cooldown
            plan = f"üî• {duree} min en {type_cardio} :\n- {warmup} min √©chauffement\n- {steady} min continu\n- {cooldown} min r√©cup√©ration"
        elif intensite == "Mod√©r√©":
            warmup = random.randint(4, 6)
            cooldown = random.randint(3, 5)
            remaining = duree - warmup - cooldown
            n_intervals = remaining // 5
            reste = remaining - n_intervals * 5
            plan = f"üî• {duree} min en {type_cardio} :\n- {warmup} min √©chauffement\n- {n_intervals} x (3 min effort + 2 min r√©cup)\n- {reste} min libre\n- {cooldown} min r√©cup√©ration"
        else:
            warmup = random.randint(3, 5)
            cooldown = random.randint(3, 5)
            remaining = duree - warmup - cooldown
            n_intervals = remaining // 2
            reste = remaining - n_intervals * 2
            plan = f"üî• {duree} min en {type_cardio} :\n- {warmup} min √©chauffement\n- {n_intervals} x (1 min sprint + 1 min r√©cup)\n- {reste} min libre\n- {cooldown} min r√©cup√©ration"

        st.markdown(f"**Plan g√©n√©r√© :**\n\n{plan}")

        if st.checkbox("Enregistrer cette s√©ance ?"):
            date = datetime.date.today()
            new_data = pd.DataFrame([[date, f"Cardio ({intensite})", duree]],
                                    columns=["Date", "Type", "Dur√©e (min)"])
            new_data.to_csv("log.csv", mode='a', header=False, index=False)
            st.success("S√©ance enregistr√©e.")

def afficher_historique():
    st.subheader("Historique")
    fichier = "log.csv"
    if os.path.exists(fichier) and os.path.getsize(fichier) > 0:
        df = pd.read_csv(fichier)
        st.dataframe(df)
    else:
        st.info("Aucune donn√©e disponible.")

def afficher_progression():
    st.subheader("Progression")
    fichier = "log.csv"
    if os.path.exists(fichier) and os.path.getsize(fichier) > 0:
        df = pd.read_csv(fichier)
        dur√©e_par_type = df.groupby("Type")["Dur√©e (min)"].sum()
        fig, ax = plt.subplots()
        ax.bar(dur√©e_par_type.index, dur√©e_par_type.values)
        ax.set_title("Dur√©e d'entra√Ænement par type")
        ax.set_xlabel("Type de s√©ance")
        ax.set_ylabel("Dur√©e (min)")
        st.pyplot(fig)
    else:
        st.info("Pas de donn√©es pour g√©n√©rer un graphique.")

# üéØ Navigation mobile-friendly
page = st.radio("üì≤ Navigation", [
    "Ajouter une s√©ance",
    "G√©n√©rer une s√©ance de cardio",
    "Afficher l'historique",
    "Afficher la progression"
])

if page == "Ajouter une s√©ance":
    ajouter_seance()
elif page == "G√©n√©rer une s√©ance de cardio":
    generer_seance_cardio()
elif page == "Afficher l'historique":
    afficher_historique()
elif page == "Afficher la progression":
    afficher_progression()
